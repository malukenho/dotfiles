" Vim Improvements
set nocompatible

" Shell
set shell=/bin/sh

" Pathogen
call pathogen#infect()

" Mouse
if has('mouse')
  set mouse=nv
endif

" Project-specific vimrc
set exrc
set secure

syntax on

set number
set ruler
set nofoldenable
set nospell

set encoding=utf-8

" Allow hidden buffers
set hidden

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list
set listchars=tab:▸\ ,trail:·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Status bar
set laststatus=2

" Right margin
" set colorcolumn=80

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Load plugin and indent settings for detected filetype
filetype plugin indent on

" Color
color jgw256

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" Reset search
map <C-l> :set hlsearch!<cr>

" Toggle relative numbers
map <C-\> :set relativenumber!<cr>

" Command height
set cmdheight=1

" Filetypes
au BufRead,BufNewFile conf set ft=apache
au BufRead,BufNewFile Gemfile set ft=ruby
au BufRead,BufNewFile Guardfile set ft=ruby
au BufRead,BufNewFile Assetfile set ft=ruby
au BufRead,BufNewFile *.hbs set ft=handlebars
au BufRead,BufNewFile *.json set ft=json

" Bubble single lines
nmap <C-Up> ddkP
nmap <C-Down> ddp
" Bubble multiple lines
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" Allow clipboard to function
set clipboard=unnamed

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" Running Tests
map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>

function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " Run the tests for the previously-marked file
  let in_test_file = match(expand("%"), '\(_spec.rb\|.feature\)$') != -1

  if in_test_file
    call SetTestFile()
  elseif !exists("t:jgw_test_file")
    return
  end

  call RunTests(t:jgw_test_file . command_suffix)
endfunction

function! RunNearestTest()
  let spec_line_number = line('.')
  call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
  let t:jgw_test_file=@%
endfunction

function! RunTests(filename)
  :w
  exec ":!bundle exec rspec " . a:filename
endfunction

" Git Gutter
map <leader>ggn :call GitGutterNextHunk()<cr>
map <leader>ggp :call GitGutterPrevHunk()<cr>

" Hard Mode
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" Disable Markdown folding
let g:vim_markdown_folding_disabled=1

" Notepad
map <Leader>nn :split ~/DropBox/notepad.md<cr>

" XMP Filter
nmap <buffer> <Leader>xx <Plug>(xmpfilter-run)
nmap <buffer> <Leader>xc <Plug>(xmpfilter-mark)

" Show highlight groups for current word
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Disable auto indentation
function! NoIndent()
  setlocal noautoindent
  setlocal nocindent
  setlocal nosmartindent
  setlocal indentexpr=
endfunc

runtime macros/matchit.vim
